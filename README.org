* Jonky - Jari's Conky
** What is it?
   An attempt to make my own conky-like tool. It'll be based on PyCairo and PyGtk. The first cut will:
   - Only allow you to write to the whole desktop
   - Only give basic drawing utilities
     - Text
     - Circles
     - Rectangles
     - Polygons
     - FontAwesome
     - Images
     - SVGs
   - A mechanism to call various functions at various times
   - A mechanism for caching
   - A way to create a live wallpaper that's controlled by time of day
   - A function for adding digital clocks at various timezones
   - Functions for retrieiving system info (disk space, cpu use, ram, etc)
   - Simple time series plots
 
** Why?
   I'm too dumb to configure conky how I like, and I've been making something similar in an ad hoc way using feh. Time to upgrade that to something more real.
   
** Architecture (planning)
*** class Jonky [X]
    - Main entry point
    - Manages references to root window, cairo context, the tick and draw function
    - Does double buffering (?)
    - Must be subclassed to create your own panels
    - Define background color
*** class Drawable [X]
    - Base class for all things that can be drawn
    - Supply =draw= function
    - Define pose in either screen space fractions or pixels
      - (how to convert screen space fractions to pixels?)
**** class Group [X]
     - Helper for grouping things together so they're easy to transform
     - Allow packing options: vertically, horizontally, grid (not implemented yet)
**** class Text [X]
     - Initialize with font name, text size (and optional bounds?)
     - Shadow or stoke option?
**** class Image [X]
     - Initialize with a PIL image, or path, or svg (?)
     - resize?
     - filters?
**** class Shape [X]
     - Base class for shapes
     - Give options for fill, stroke
***** class Circle [X]
      - Init with radius + inherit
***** class Rectangle [X]
      - Init with w, h, [rounding radius] + inherit
*** ??? Some sort of a baking mechanism
    So, let's say you wanna draw a clock. You could make a rudimentary one with a group that draws a circle and the ticks and set it up so that the needles move based on the time.
    
    The trouble is that with every draw call, you'd draw everything. That's a fair bit on unnecessary compute (come to think of it this is true for a lot of things, e.g. animated text)
    
    So, we should have a BakedGroup. The point of the baked group is to do the drawing once (or on special calls) and to save them to a surface. Then draw the surface every time rather than repeat the potentially expensive operations
*** ??? Some sort of a transformer API?
    Like, attach a transformer to any signal of any drawable and have that signal be updated by the transformer.
    
    e.g. DigitalClock is actually just Text with a Transfomer that updates the .text field
    or   the full time dial is just a bunch of TimeDials with a single line on top, and that pose of that line can be passed off to a Transformer
    etc
** Widgets
*** Digital clock
    Basic digital clock with minimal formatting and some suffix allowed. Timezone needs to be provided (or sytem timezone will be used???)
*** 24 Hour Multi Timezone Clock
    It's something I use, pictures help better than words
*** Day calendar
    Basic vertical calendar that shows N hours before and N hours after and has a transformation emphasizing closer events more.
    - Need a way to supply/update events
** Installation
   - Install pycairo (https://pycairo.readthedocs.io/en/latest/getting_started.html)
   - More things?